import "strings"
import "types"

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"google_compute_shared_vpc_service_project": {
				"svc_proj_attachment": {
					0: {
						"applied": {
							"host_project":    "unprotected-host-project-1",
							"service_project": "a-service-project-0",
							"timeouts":        null,
						},
						"destroy": false,
						"diff": {
							"host_project": {
								"computed": false,
								"new":      "unprotected-host-project-1",
								"old":      "",
							},
							"id": {
								"computed": true,
								"new":      "",
								"old":      "",
							},
							"service_project": {
								"computed": false,
								"new":      "a-service-project-0",
								"old":      "",
							},
							"timeouts": {
								"computed": false,
								"new":      "",
								"old":      "",
							},
						},
						"requires_new": false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "0.14.7"

variables = {
	"host_project_id":    "unprotected-host-project-1",
	"service_project_id": "a-service-project-0",
}

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
